import helpers { read_lines, min }

class Valve implements(Hashable,Comparable<Valve>,Equatable<Valve>) {
    public name: String
    rate: i64? = None
    tunnels: [String]
    tunnel_weights: [String: i64]
    public source: Valve? = None

    public function remove_neighbour(mut this, anon s: String) {
        this.tunnel_weights.remove(s)
    }

    public function set_distance(mut this, anon s: String, anon i: i64) throws {
        this.tunnel_weights.set(s, i)
    }

    public function immediate_tunnels(this) -> [String] {
        return this.tunnels
    }

    public function flow_rate(this) -> i64 {
        return this.rate!
    }

    public function neighbours(this) -> [String: i64] {
        // TODO change this to have weights to all other nodes?
        // so we can move all the way to the right place
        // this will be useful in calculating the h()
        return this.tunnel_weights // FIXME this may allow modification
    }

    public function parse(mut valves: [String: Valve?], anon s: String) throws -> Valve {
        let split = s.split(' ')
        let name = split[1]
        let rate = split[4].split('=')[1].split(';')[0].to_int()! as! i64
        // paths start at [9]
        mut tunnels: [String] = []

        for i in 9..split.size() {
            let v_name = split[i].split(',')[0]
            tunnels.push(v_name)
        }

        let tunnel_weights: [String: i64] = Dictionary<String, i64>()
        let valve = Some(Valve(name, rate, tunnels, tunnel_weights))
        valves.set(name, valve)
        return valve!
    }

    public function equals(this, anon other: Valve) -> bool {
        return .name == other.name
    }

    public function compare(this, anon other: Valve) -> i64 {
        guard .source.has_value() else {
            let me = 0
            guard other.source.has_value() else { return 0 }
            guard other.source!.tunnel_weights.contains(other.name) else { return -1 }
            let them = other.source!.tunnel_weights[other.name]
            return me as! i64 - them as! i64
        }
        guard .source!.tunnel_weights.contains(.name) else {
            guard .source!.tunnel_weights.contains(other.name) else { return 0 }
            return 1
        }
        guard .source!.tunnel_weights.contains(other.name) else { return -1 }
        let me = .source!.tunnel_weights[.name]
        let them = .source!.tunnel_weights[other.name]
        return me - them
    }

    public function hash(this) -> u32 {
        return .name.hash()
    }
}

class Valves {
    public d: [String: Valve?]
}

struct Node implements(Hashable,Comparable<Node>,Equatable<Node>) {
    current: String? = None
    current_e: String? = None
    minutes: i64 = 0
    open_valves: [String]
    released: i64 = 0
    just_opened: String? = None
    just_opened_e: String? = None
    minutes_left: i64 = 0
    minutes_left_e: i64 = 0
    valves: Valves?

    function to_string(this) throws -> String {
        return format("min={},rel={},open={},cur={},cur_e={},left={},left_e={}", .minutes, .released, .open_valves, .current, .current_e, .minutes_left, .minutes_left_e)
    }

    function start_node(valves: Valves) throws -> Node {
        let open_valves: [String] = []
        return Node(current: "AA", current_e: "AA", open_valves, valves)
    }

    function clone(this) throws -> Node {
        mut open_valves: [String] = []
        for v in this.open_valves {
            open_valves.push(v)
        }
        return Node(
            current: this.current,
            current_e: this.current_e,
            minutes: this.minutes,
            open_valves,
            released: this.released,
            valves: this.valves,
        )
    }

    function neighbours(this, valves: Valves, elephant: bool=false) throws -> [Node] {
        mut ret: [Node] = []
        if elephant and this.minutes == 0 {
            mut node = this.clone()
            // teach the elephant how to do things
            node.minutes += 4
            ret.push(node)
            return ret
        }
        if elephant {
            if this.minutes_left > 0 {
                // pick another one for the elephant, get min and set either minutes_left or minutes_left_e
                let s = this.current!
                mut time = this.minutes_left
                let valve_e = valves.d.get(this.current_e!)!!
                for (s_e, i_e) in valve_e.neighbours() {
                    if s == s_e { continue }
                    if s_e == this.current_e! { continue }
                    if this.open_valves.contains(s_e) { continue }
                    if valves.d.get(s_e)!!.flow_rate() == 0 { continue }
                    time = this.minutes_left
                    mut time_e = i_e + 1 // travel time + open time
                    mut node = this.clone()
                    node.current_e = s_e
                    if time_e > time {
                        // we can get all the way to our valve, the elephant won't
                        time_e -= time
                        node.minutes += time
                        node.minutes_left = 0
                        node.minutes_left_e = time_e // set time remaining for elephant
                        for v2 in node.open_valves {
                            node.released += time * valves.d.get(v2)!!.flow_rate()
                        }
                        // open it
                        node.open_valves.push(node.current!)
                        node.just_opened = node.current!
                        ret.push(node)
                    } else {
                        // we either get to our goal at same time as elephant, or elephant beats us
                        time -= time_e
                        node.minutes += time_e
                        node.minutes_left = time // this may be 0 if we get there at same time
                        node.minutes_left_e = 0
                        for v2 in node.open_valves {
                            node.released += time_e * valves.d.get(v2)!!.flow_rate()
                        }
                        // open it
                        if time == 0 {
                            node.open_valves.push(node.current!)
                            node.just_opened = node.current!
                        }
                        node.open_valves.push(node.current_e!)
                        node.just_opened_e = node.current_e!
                        ret.push(node)
                    }
                }
                if ret.size() == 0 {
                    mut node = this.clone()
                    time = this.minutes_left
                    if time > this.minutes_remaining() {
                        // should be unreachable with check above
                        eprintln("unreachable time > this.minutes_remaining() ({} > {}) - {}", time, this.minutes_remaining(), this)
                        return ret
                    }
                    node.minutes += time
                    node.minutes_left = 0
                    for v2 in node.open_valves {
                        node.released += time * valves.d.get(v2)!!.flow_rate()
                    }
                    node.open_valves.push(node.current!)
                    node.just_opened = node.current!
                    ret.push(node)
                }
            } else if this.minutes_left_e > 0 {
                // pick another one for us, elephant is still on route
                let s_e = this.current_e!
                mut time_e = this.minutes_left_e
                let valve = valves.d.get(this.current!)!!
                for (s, i) in valve.neighbours() {
                    if s == s_e { continue }
                    if s == this.current! { continue }
                    if this.open_valves.contains(s) { continue }
                    if valves.d.get(s)!!.flow_rate() == 0 { continue }
                    time_e = this.minutes_left_e
                    mut time = i + 1 // travel time + open time
                    mut node = this.clone()
                    node.current = s
                    if time_e > time {
                        // we can get all the way to our valve, the elephant won't
                        time_e -= time
                        node.minutes += time
                        node.minutes_left = 0
                        node.minutes_left_e = time_e // set time remaining for elephant
                        for v2 in node.open_valves {
                            node.released += time * valves.d.get(v2)!!.flow_rate()
                        }
                        // open it
                        node.open_valves.push(node.current!)
                        node.just_opened = node.current!
                        ret.push(node)
                    } else {
                        // we either get to our goal at same time as elephant, or elephant beats us
                        time -= time_e
                        node.minutes += time_e
                        node.minutes_left = time // this may be 0 if we get there at same time
                        node.minutes_left_e = 0
                        for v2 in node.open_valves {
                            node.released += time_e * valves.d.get(v2)!!.flow_rate()
                        }
                        // open it
                        if time == 0 {
                            node.open_valves.push(node.current!)
                            node.just_opened = node.current!
                        }
                        node.open_valves.push(node.current_e!)
                        node.just_opened_e = node.current_e!
                        ret.push(node)
                    }
                }
                if ret.size() == 0 {
                    mut node = this.clone()
                    time_e = this.minutes_left_e
                    if time_e > this.minutes_remaining() {
                        // should be unreachable with check above
                        eprintln("unreachable time_e > this.minutes_remaining() ({} > {}) - {}", time_e, this.minutes_remaining(), this)
                        return ret
                    }
                    node.minutes += time_e
                    node.minutes_left_e = 0
                    for v2 in node.open_valves {
                        node.released += time_e * valves.d.get(v2)!!.flow_rate()
                    }
                    node.open_valves.push(node.current_e!)
                    node.just_opened_e = node.current_e!
                    ret.push(node)
                }
            } else {
                // both us and the elephant need to start moving
                // will need to find the min
                let valve = valves.d.get(this.current!)!!
                mut possibles: [String] = []
                for (s, i) in valve.neighbours() {
                    if s == this.current! { continue }
                    if this.open_valves.contains(s) { continue }
                    if valves.d.get(s)!!.flow_rate() == 0 { continue }
                    let time = i + 1 // travel time + open time
                    if time > this.minutes_remaining() {
                        // takes too long
                        continue
                    }
                    possibles.push(s)
                }
                let n = valve.neighbours()
                let keys = n.keys()
                for idx in 0..keys.size() {
                    let s = keys[idx]
                    let i = n[s]
                    if s == this.current! { continue }
                    if this.open_valves.contains(s) { continue }
                    if valves.d.get(s)!!.flow_rate() == 0 { continue }
                    mut time = i + 1 // travel time + open time
                    if time > this.minutes_remaining() {
                        // takes too long
                        continue
                    }
                    let valve_e = valves.d.get(this.current_e!)!!
                    let n_e = valve_e.neighbours()
                    let keys_e = n_e.keys()
                    mut start = 0uz
                    if this.current_e! == this.current! {
                        // prob only happens when both AA
                        // when this happens we don't want to have nodes before ours
                        // otherwise we'll have reflected ones
                        start = idx + 1
                    }
                    for idx_e in start..keys_e.size() {
                        let s_e = keys_e[idx_e]
                        let i_e = n_e[s_e]
                        if possibles.size() > 1 and s == s_e { continue }
                        if s_e == this.current_e! { continue }
                        if this.open_valves.contains(s_e) { continue }
                        if valves.d.get(s_e)!!.flow_rate() == 0 { continue }
                        time = i + 1 // travel time + open time
                        mut time_e = i_e + 1 // travel time + open time
                        if time_e > this.minutes_remaining() {
                            // takes too long
                            continue
                        }
                        mut node = this.clone()
                        node.current = s
                        node.current_e = s_e
                        if time_e > time {
                            // we can get all the way to our valve, the elephant won't
                            time_e -= time
                            node.minutes += time
                            node.minutes_left = 0
                            node.minutes_left_e = time_e // set time remaining for elephant
                            for v2 in node.open_valves {
                                node.released += time * valves.d.get(v2)!!.flow_rate()
                            }
                            // open it
                            node.open_valves.push(node.current!)
                            node.just_opened = node.current!
                            ret.push(node)
                        } else {
                            // we either get to our goal at same time as elephant, or elephant beats us
                            time -= time_e
                            node.minutes += time_e
                            node.minutes_left = time // this may be 0 if we get there at same time
                            node.minutes_left_e = 0
                            for v2 in node.open_valves {
                                node.released += time_e * valves.d.get(v2)!!.flow_rate()
                            }
                            // open it
                            if time == 0 and s != s_e {
                                node.open_valves.push(node.current!)
                                node.just_opened = node.current!
                            }
                            node.open_valves.push(node.current_e!)
                            node.just_opened_e = node.current_e!
                            ret.push(node)
                        }
                    }
                }
            }
        } else {
            // move to a new valve for x min, then open it, ignore 0 rates and already open
            let valve = valves.d.get(this.current!)!!
            for (s, i) in valve.neighbours() {
                if s == this.current! { continue }
                if this.open_valves.contains(s) { continue }
                if valves.d.get(s)!!.flow_rate() == 0 { continue }
                mut time = i + 1 // travel time + open time
                if time > this.minutes_remaining() {
                    // takes too long
                    continue
                }
                mut node = this.clone()
                // move there, then open it
                node.minutes += time
                node.current = s
                for v2 in node.open_valves {
                    node.released += time * valves.d.get(v2)!!.flow_rate()
                }
                // open it
                node.open_valves.push(node.current!)
                node.just_opened = node.current!
                ret.push(node)
            }
        }
        // if we don't have neighbours, just stay put and wait
        if ret.size() == 0 {
            mut node = this.clone()
            let time = this.minutes_remaining()
            node.minutes += time
            for v2 in node.open_valves {
                node.released += time * valves.d.get(v2)!!.flow_rate()
            }
            ret.push(node)
        }
        return ret
    }

    function is_complete(this) -> bool {
        return this.minutes_remaining() == 0
    }

    function minutes_remaining(this) -> i64 {
        return 30 - this.minutes
    }

    function g(this) -> i64 {
        return this.released
    }

    function h(this) -> i64 => ._h_all_elephant()
//    function h(this) -> i64 => ._h_all()
//    function h(this) -> i64 => ._h_not_open() // this doesn't work
//    function h(this) -> i64 => ._h_open() // or this
    function _h_open(this) -> i64 {
        mut ret = 0
        for v in this.open_valves {
            mut time = this.minutes_remaining()
            if this.just_opened.has_value() and this.just_opened! == v {
                time --
            }
            ret += time * .valves!.d.get(v)!!.flow_rate()
        }
        return ret
    }
    function _h_not_open(this) -> i64 {
        mut ret = 0
        for (s, v) in .valves!.d {
            if .open_valves.contains(s) { continue }
            mut time = this.minutes_remaining()
            ret += time * v!.flow_rate()
        }
        return ret
    }
    function _h_all(this) -> i64 {
        mut ret = 0
        for (s, v) in .valves!.d {
            mut time = this.minutes_remaining()
            ret += time * v!.flow_rate()
        }
        return ret
    }
    function _h_all_elephant(this) -> i64 {
        mut ret = 0
        for (s, v) in .valves!.d {
            mut time = this.minutes_remaining() - .minutes_left - .minutes_left_e
            ret += time * v!.flow_rate()
        }
        for v in this.open_valves {
            mut time = .minutes_left + .minutes_left_e
//            if (this.just_opened.has_value() and this.just_opened! == v) or (.just_opened_e.has_value() and .just_opened_e! == v) {
//                time --
//            }
            ret += time * .valves!.d.get(v)!!.flow_rate()
        }
        return ret
    }

    function f(this) -> i64 => .g() + .h()

    function equals(this, anon other: Node) -> bool {
        mut ret = false
        ret = .minutes == other.minutes and .released == other.released and .current == other.current and .current_e == other.current_e and .open_valves.size() == other.open_valves.size()
        if ret {
            for v in .open_valves {
                if not other.open_valves.contains(v) {
                    ret = false
                    break
                }
            }
        }
        return ret
    }

    function compare(this, anon other: Node) -> i64 {
        // higher score gets sorted first
        return other.f() as! i64 - this.f() as! i64
    }

    function hash(this) -> u32 {
        mut ret = 0u32
        try {
            ret = format("{}{}{}{}{}", .minutes, .released, .open_valves, .current, .current_e).hash()
        } catch { }
        return ret
    }
}

function a_star(valves: Valves, mut start: Node, elephant: bool = false) throws -> Node? {

    start.valves = valves
    let start_str = start.to_string()
    mut open: HashablePriorityQueue<Node> = HashablePriorityQueue()
    open.push(start)
    // Still need weird i64's as can't use Point's in a Dictionary
    mut gs = Dictionary<String, i64?>()
    gs[start_str] = start.g()
    mut fs = Dictionary<String, i64?>()
    fs[start_str] = start.h()
    mut popped = 0
    while not open.is_empty() {
        let current = open.peek()!
        let current_s = current.to_string()
//        if popped % 100000 == 0{// or current.is_complete() {
//            println("minutes = {}, released = {}, f = {}, g = {}, h = {}, opened = {}, size = {}, popped = {}"
//                current.minutes
//                current.released
//                fs[current_s]
//                current.g()
//                current.h()
//                current.open_valves
//                open.size()
//                popped
//            )
//            println("{}", current.to_string())
//        }
//        popped ++
        // Hard code low value that is wrong
        let wrong_answer = 2708
        if elephant and valves.d.size() > 10 { return current } // exit if on part 2 of actual input
        if current.is_complete() and (elephant and valves.d.size() > 10 and current.released <= wrong_answer) {
            println("Ignoring complete node {} as too small..., size = {}", current.released, open.size())
        }
        if current.is_complete() and (not elephant or valves.d.size() <= 10 or current.released > wrong_answer) {
            return current
        }
        let ignore = open.pop()
        for n in current.neighbours(valves, elephant) {
            let n_s = n.to_string()
            let g = n.g()
            if not gs.contains(n_s) or g > gs[n_s]! {
                gs[n_s] = g
                fs[n_s] = g + n.h()
                if not open.contains(n) {
                    open.push(n)
                }
            }
        }
    }
    return None
}

function dijkstra(mut valves: Valves) throws {
    for (source_s, source_v) in valves.d {
        mut source = source_v
        mut q: HashablePriorityQueue<Valve> = HashablePriorityQueue()
        mut dist = Dictionary<String, i64?>()
        source!.source = None
        for (v_s, v) in valves.d {
            if v_s == source_s { continue }
            valves.d[v_s]!.source = source
            q.push(valves.d[v_s]!)
        }
        q.push(source!)
        dist[source_s] = 0
        source!.set_distance(source_s, 0)

        while not q.is_empty() {
            let u = q.pop()!
            let u_s = u.name
            for v_s in u.immediate_tunnels() {
                let v = valves.d.get(v_s)!
//                if not q.contains(v!) { continue }
                let alt = dist[u_s]! + 1 // edge weight always 1 here
                if not dist.contains(v_s) or alt < dist[v_s]! {
                    dist[v_s] = alt
                    source!.set_distance(v_s, alt)
                    q.remove(v!)
                    q.push(v!)
                }
            }
        }
    }
}

import jakt::libc::io { system }
function main(args: [String]) {
    mut d: [String: Valve?] = Dictionary<String, Valve?>()
    mut valves = Valves(d)
    for line in read_lines(filename: "input") {
        let v = Valve::parse(valves: valves.d, line)
    }
    dijkstra(valves)
    mut remove: {String} = {}
    for (s, v) in valves.d {
        if s == "AA" { continue }
        if v!.flow_rate() == 0 {
            remove.add(s)
        }
    }
    for s in remove {
        valves.d.remove(s)
    }
    for (s, v) in valves.d {
        for r in remove {
            valves.d[s]!.remove_neighbour(r)
        }
    }
//    for (s, v) in valves {
//        println("{} - {}", s, v!.flow_rate())
//        for (n, d) in v!.neighbours() {
//            println("  {} - {}", n, d)
//        }
//    }
    let start = Node::start_node(valves)
    mut max_node = a_star(valves, start)!
    println("Part 1: {}", max_node.released)
    max_node = a_star(valves, start, elephant: true)!
    println("Part 2: {}", max_node.released)
}
trait Equatable<T> {
    function equals(this, anon other: T) -> bool
}
trait Hashable {
    function hash(this) -> u32
}
class MyList<T requires(Equatable<T>)> implements(IntoIterator<T>) {
    public // have next as public as can't have inner class for iterator
    next: MyList<T>? = None
    public // have next as public as can't have inner class for iterator
    data: T? = None

    public function remove(mut this, anon val: T) -> bool {
        guard .data.has_value() else {
            return false
        }
        if .data!.equals(val) {
            if .next.has_value() {
                .data = .next!.data
                .next = .next!.next
            } else {
                .data = None
            }
            return true
        }
        if .next.has_value() {
            return .next!.remove(val)
        }
        return false
    }

    public function add(mut this, anon val: T) throws {
        if not .data.has_value() {
            .data = val
            // .next = None // This should already be None if data was None
            return
        }
        guard .next.has_value() else {
            .next = MyList(data: val)
            return
        }
        .next!.add(val)
    }

    public function contains(this, anon val: T) -> bool {
        guard .data.has_value() else { return false }
        if .data!.equals(val) { return true }
        guard .next.has_value() else { return false }
        return .next!.contains(val)
    }

    public function size(this) -> usize {
        guard .data.has_value() else { return 0 }
        guard .next.has_value() else { return 1 }
        return 1 + .next!.size()
    }
    public function is_empty(this) -> bool => .size() == 0

    public function iterator(this) -> Iterable<T> => MyListIterator(node: this)
}

struct MyListIterator<T> implements(Iterable<T>) {

    node: MyList<T>?

    function next(mut this) -> T? {
        guard .node.has_value() else { return None }
        let ret = .node!.data
        .node = .node!.next as! MyList<T>?
        return ret
    }
}

class MySet<T requires(Equatable<T>,Hashable)> {
    data: [u32: MyList<T>]? = None
    // TODO have a capacity which grows and is used to mod key for better hash collision resistance

    public function add(mut this, anon val: T) throws {
        ._initialize_if_needed()

        let idx = ._hash(val)
        mut bucket = .data!.get(idx)
        if not bucket.has_value() {
            .data![idx] = MyList()
            bucket = .data!.get(idx)
        }
        for v in bucket! {
            if v.equals(val) { return }
        }
        bucket!.add(val)
    }

    public function remove(mut this, anon val: T) -> bool {
        guard .data.has_value() else { return false }

        let idx = ._hash(val)
        mut bucket = .data!.get(idx)
        guard bucket.has_value() else { return false }
        let ret = bucket!.remove(val)
        if ret and bucket!.is_empty() {
            .data!.remove(idx)
            return true
        }
        return ret
    }

    public function contains(this, anon val: T) -> bool {
        guard .data.has_value() else { return false }

        let idx = ._hash(val)
        mut bucket = .data!.get(idx)
        guard bucket.has_value() else { return false }
        for v in bucket! {
            if v.equals(val) { return true }
        }
        return false
    }

    public function size(this) -> usize {
        guard .data.has_value() else { return 0 }
        return .data!.size()
    }
    public function is_empty(this) -> bool => .size() == 0

    // Private functions

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _initialize_if_needed(mut this) throws {
        if .data.has_value() { return }
        let data: [u32: MyList<T>] = [:]
        .data = data
    }

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _hash(this, anon val: T) -> u32 {
        return val.hash()
    }
}

class HashablePriorityQueue<T requires(Hashable)> {
    // FIXME: really should extend from this...
    public q: PriorityQueue<T>? = None
    seen: MySet<T>? = None

    public function push(mut this, anon val: T) throws {
        // FIXME: need Super type and inherit, and just call Super._init inside our override
        ._initialize_if_needed()
        // FIXME: need Super type and inherit, and to use Super.push(val)
        .q!.push(val)
        .seen!.add(val)
    }

    public function pop(mut this) -> T? {
        // FIXME: need Super type and inherit, and to use Super.pop
        let ret = .q!.pop()
        if ret.has_value() {
            .seen!.remove(ret!)
        }
        return ret
    }
    public function peek(mut this) -> T? => .q!.peek()

    public function remove(mut this, anon val: T) -> bool {
        guard .q.has_value() else { return false }
        .seen!.remove(val)
        return .q!.remove(val)
    }

    public function contains(this, anon val: T) -> bool {
        guard .seen.has_value() else { return false }
        return .seen!.contains(val)
    }

    public function size(this) -> usize {
        guard .q.has_value() else { return 0 }
        return .q!.size()
    }
    public function is_empty(this) -> bool => .size() == 0

    // Private functions

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _initialize_if_needed(mut this) throws {
        // FIXME: need Super type, then don't have __init, and just call Super._init
        if not .q.has_value() {
            .q = PriorityQueue()
        }
        .q!._initialize_if_needed()
        if .seen.has_value() { return }
        let seen: MySet<T> = MySet()
        .seen = seen
    }
}



trait Comparable<T> {
    function compare(this, anon other: T) -> i64
}


class PriorityQueue<T requires(Comparable<T>,Equatable<T>)> {

    public data: [T]? = None


    public function push(mut this, anon val: T) throws {
        ._initialize_if_needed()

        .data!.push(val)
        ._sift_up(idx: .data!.size() - 1)
    }

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _sift_up(mut this, idx: usize) {
        guard .data.has_value() and idx < .data!.size() else { return }
        mut child_idx = idx
        for parent_idx in ParentIterator(idx) {
            let child = .data![child_idx]
            let parent = .data![parent_idx]
            if child.compare(parent) >= 0 {
                break
            }
            ._swap(child_idx, parent_idx)
            child_idx = parent_idx
        }
    }

    public function pop(mut this) -> T? {
        guard .data.has_value() and .data!.size() > 0 else {
            return None
        }
        if .data!.size() == 1 {
            return .data!.pop()!
        }

        let ret = .data![0]
        ._remove(idx: 0)
        return ret
    }

    public function remove(mut this, anon val: T) -> bool {
        guard .data.has_value() else { return false }
        mut idx = 0uz
        while idx < .data!.size() {
            if val.equals(.data![idx]) {
                ._remove(idx)
                ._sift_up(idx)
                return true
            }
            idx ++
        }
        return false
    }

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _remove(mut this, idx: usize) {
        guard .data.has_value() and idx < .data!.size() else { return }
        guard idx < .data!.size() - 1 else {
            let ignore = .data!.pop()
            return
        }
        .data![idx] = .data!.pop()!
        mut parent_idx = idx
        while parent_idx < .data!.size() {
            mut (left_idx, right_idx) = (parent_idx * 2 + 1, parent_idx * 2 + 2)
            guard left_idx < .data!.size() else { break }
            let parent = .data![parent_idx]
            let left = .data![left_idx]
            if left.compare(parent) >= 0 {
                // left child is correct, check the right
                guard right_idx < .data!.size() and .data![right_idx].compare(parent) < 0 else { break }
                // fall through to swap right
            } else if right_idx >= .data!.size() or .data![right_idx].compare(left) >= 0 {
                // right is non-existent or bigger than left
                ._swap(left_idx, parent_idx)
                parent_idx = left_idx
                continue
            }
            ._swap(right_idx, parent_idx)
            parent_idx = right_idx
        }
    }


    public function peek(this) -> T? {
        guard .data.has_value() and .data!.size() > 0 else {
            return None
        }
        return .data![0]
    }

    public function size(this) -> usize {
        guard .data.has_value() else { return 0 }
        return .data!.size()
    }

    public function is_empty(this) -> bool => .size() == 0

    public function contains(this, anon val: T) -> bool {
        guard .data.has_value() else { return false }
        for v in .data! {
            if v.equals(val) { return true }
        }
        return false
    }

    // Private functions

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _initialize_if_needed(mut this) throws {
        if .data.has_value() { return }
        let data: [T] = []
        .data = data
    }

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _swap(mut this, anon a: usize, anon b: usize) {
        guard .data.has_value() and a < .data!.size() and b < .data!.size() else {
            return
        }
        let tmp = .data![a]
        .data![a] = .data![b]
        .data![b] = tmp
    }
}
struct ParentIterator implements(Iterable<usize>) {

    idx: usize

    function next(mut this) -> usize? {
        guard .idx != 0 else {
            return None
        }

        let ret = (.idx - 1) / 2
        .idx = ret
        return ret
    }
}
