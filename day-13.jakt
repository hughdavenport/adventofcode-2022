import helpers { read_lines }

enum PacketData {
    Int(i64)
    List([PacketData])

    function find_end_bracket(anon s: String) throws -> usize {
        mut stack: [usize] = []
        stack.push(0uz)
        mut i: usize = 1uz
        while not stack.is_empty() {
            match s.byte_at(i) {
                b'[' => {stack.push(i)}
                b']' => {let unused=stack.pop()}
                else => {}
            }
            i++
        }
        return i-1
    }

    function parse(anon s: String) throws -> (PacketData, String) => match s.byte_at(0) {
        b'[' => {
            let i = find_end_bracket(s)
            mut sub = s.substring(start: 1, length: i-1)
            mut l: [PacketData] = []
            while sub.length() > 0 {
                let ret = PacketData::parse(sub)
                l.push(ret.0)
                sub = ret.1
            }
            mut rest: String = ""
            if i + 1 != s.length() {
                rest = s.substring(start: i+2, length: s.length()-i-2)
            }
            yield (PacketData::List(l), rest)
        }
        else => {
            mut i: usize = 0
            while i < s.length() {
                if s.byte_at(i) == b',' {
                    break
                }
                i++
            }
            let num = s.substring(start: 0, length: i)
            let data = PacketData::Int(i: num.to_int()! as! i64)
            mut rest: String = ""
            if i != s.length() {
                 rest = s.substring(start: i+1, length: s.length()-i-1)
            }
            yield (data, rest)
        }
    }

    function to_string(this) throws -> String => match this {
        Int(i) => format("{}", i)
        List(l) => {
            mut builder = StringBuilder::create()
            builder.append_string("[")
            mut first = true
            for d in l {
                if first {
                    first = false
                } else {
                    builder.append_string(",")
                }
                 builder.append_string(d.to_string())
             }
             builder.append_string("]")
             yield builder.to_string()
        }
    }

    function compare(this, anon d: PacketData) throws -> i64 => match this {
        Int(i) => match d {
            Int(i2) => i - i2
            List(l) => PacketData::List(l: [this]).compare(d)
        }
        List(left) => match d {
            Int(i) => this.compare(PacketData::List(l: [d]))
            List(right) => {
                mut i: usize = 0uz
                mut ret = 0
                while ret == 0 and i < left.size() and i < right.size() {
                    ret = left[i].compare(right[i])
                    i++
                }
                if ret == 0 and left.size() != right.size() {
                    if i < left.size() {
                        ret = 1
                    } else if i < right.size() {
                        ret = -1
                    }
                }
                yield ret
            }
        }
    }
}

struct Packet {
    data: PacketData

    function parse(anon s: String) throws -> Packet {
        return Packet(data: PacketData::parse(s).0)
    }

    function to_string(this) throws -> String {
        return this.data.to_string()
    }

    function compare(this, anon p: Packet) throws -> i64 {
        return this.data.compare(p.data)
    }
}

function sort(anon mut ps: [Packet]) throws {
    // FIXME do something better than bubble sort
    let n = ps.size()
    mut swapped = true
    while swapped {
        swapped = false
        for i in 1..n {
            if ps[i-1].compare(ps[i]) > 0 {
                let p = ps[i-1]
                ps[i-1] = ps[i]
                ps[i] = p
                swapped = true
            }
        }
    }
}

function print_packets(anon ps: [Packet]) throws {
    for p in ps {
        println(p.to_string())
    }
}

function main(args: [String]) {
    mut packets: [Packet] = []
    mut all_packets: [Packet] = []
    mut i = 1
    mut sum = 0
    for line in read_lines(filename: "input") {
        if line.length() == 0 {
            if packets[0].compare(packets[1]) <= 0 {
                sum += i
            }
            packets = []
            i++
        } else {
            let p = Packet::parse(line)
            packets.push(p)
            all_packets.push(p)
        }
    }
    if packets[0].compare(packets[1]) <= 0 {
        sum += i
    }
    println("Part 1: {}", sum)
    sort(all_packets)
    let p1 = Packet::parse("[[2]]")
    let p2 = Packet::parse("[[6]]")
    mut part2 = 1
    mut i2: usize = 0uz
    while i2 < all_packets.size() and all_packets[i2].compare(p1) < 0 {
        i2++
    }
    i2++
    part2 *= i2 as! i64
    while i2 < all_packets.size() and all_packets[i2].compare(p2) < 0 {
        i2++
    }
    part2 *= (i2+2) as! i64
    println("Part 2: {}", part2)
}
