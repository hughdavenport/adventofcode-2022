import helpers { read_lines, abs, min, max }

struct Point {
    x: i64
    y: i64

    function distance(this, anon p: Point) -> i64 {
        return abs(this.x-p.x)+abs(this.y-p.y)
    }
}

struct Sensor {
    sensor: Point
    beacon: Point

    function parse(anon s: String) throws -> Sensor {
        let split = s.split('=')
        let sensor = Point(
            x: split[1].split(',')[0].to_int()! as! i64,
            y: split[2].split(':')[0].to_int()! as! i64
        )
        let beacon = Point(
            x: split[3].split(',')[0].to_int()! as! i64,
            y: split[4].to_int()! as! i64
        )
        return Sensor(sensor, beacon)
    }

    function distance(this) -> i64 {
        return this.sensor.distance(this.beacon)
    }

    function bounds(this) -> Box {
        // works out bounds of the diamond surrounding the sensor
        let distance = this.distance()
        return Box(
            origin: Point(x: this.sensor.x - distance, y: this.sensor.y - distance),
            corner: Point(x: this.sensor.x + distance, y: this.sensor.y + distance)
        )
    }

}

struct Box {
    origin: Point
    corner: Point

    function adjust_bounds(mut this, anon p: Point) {
        if p.x < this.origin.x {
            this.origin.x = p.x
        }
        if p.y < this.origin.y {
            this.origin.y = p.y
        }
        if p.x > this.corner.x {
            this.corner.x = p.x
        }
        if p.y > this.corner.y {
            this.corner.y = p.y
        }
    }

    function adjust_bounds(mut this, anon b: Box) {
        this.adjust_bounds(b.origin)
        this.adjust_bounds(b.corner)
    }

    function size(this) -> usize {
        return this.width() * this.height()
    }

    function width(this) -> usize {
        return (this.corner.x - this.origin.x + 1) as! usize
    }

    function height(this) -> usize {
        return (this.corner.y - this.origin.y + 1) as! usize
    }

    function normalise(this, x: i64, y: i64) -> usize {
        let (_x, _y) = (
            (x - this.origin.x) as! usize,
            (y - this.origin.y) as! usize
        )
        return _y * this.width() + _x
    }

    function in_bounds(this, x: i64, y: i64) -> bool {
        return this.origin.x <= x and this.corner.x >= x and this.origin.y <= y and this.corner.y >= y
    }
}

enum Thing {
    SENSOR
    BEACON
    UNAVAILABLE
    EMPTY

    function to_byte(this) -> u8 => match this {
        SENSOR => b'S'
        BEACON => b'B'
        UNAVAILABLE => b'#'
        EMPTY => b'.'
    }
}

function fill_row(y: i64, mut row: [Thing], sensors: [Sensor], box: Box) {
    for s in sensors {
        if y == s.sensor.y {
            row[box.normalise(x: s.sensor.x, y: box.origin.y)] = Thing::SENSOR()
        }
        if y == s.beacon.y {
            row[box.normalise(x: s.beacon.x, y: box.origin.y)] = Thing::BEACON()
        }
    }
    for s in sensors {
        let distance = s.distance()
        let _x = s.sensor.x
        if y >= s.sensor.y-distance and y <= s.sensor.y+distance {
            let _y = distance - abs(y - s.sensor.y)
            for x in (_x-_y)..(_x+_y+1) {
                if not box.in_bounds(x, y: box.origin.y) {
                    continue
                }
                let idx = box.normalise(x, y: box.origin.y)
                if row[idx] is EMPTY() {
                    row[idx] = Thing::UNAVAILABLE()
                }
            }
        }
    }
}

function print_map(sensors: [Sensor], box: Box, bold: Box) throws {
    for y in 0..box.height() {
        let _y = (y as! i64) + box.origin.y
        mut row: [Thing] = [Thing::EMPTY(); box.width()]
        fill_row(y: _y, row, sensors, box)
        for x in 0..box.width() {
            let _x = (x as! i64) + box.origin.x
            if bold.in_bounds(x: _x, y: _y) {
                print("\e[1;31m")
            }
            print("{:c}", row[x].to_byte())
            if bold.in_bounds(x: _x, y: _y) {
                print("\e[0m")
            }
        }
        println()
    }
}

function main(args: [String]) {
    mut sensors: [Sensor] = []
    for line in read_lines(filename: "input") {
        sensors.push(Sensor::parse(line))
    }
    mut box: Box = Box(origin: sensors[0].sensor, corner: sensors[0].sensor)
    for s in sensors {
        box.adjust_bounds(s.bounds())
    }
    mut y = 2000000
    mut search_box = Box(origin: Point(x: 0, y: 0), corner: Point(x: 4000000, y: 4000000))
    if box.height() < 2000000 {
        // example input
        y = 10
        search_box.corner.x = 20
        search_box.corner.y = 20
        //print_map(sensors, box, bold: search_box)
    }
    mut row: [Thing] = [Thing::EMPTY(); box.width()]
    fill_row(y, row, sensors, box)
    mut count = 0uz
    for x in 0..box.width() {
        if row[x] is EMPTY() {
            count ++
        }
    }
    println("Part 1: {}", box.width()-count - 1)
    for y in search_box.origin.y..(search_box.corner.y+1) {
        mut found = false
        row = [Thing::EMPTY(); search_box.width()]
        fill_row(y, row, sensors, box: search_box)
        for x in search_box.origin.x..(search_box.corner.x+1) {
            let idx = search_box.normalise(x, y: search_box.origin.y)
            if row[idx] is EMPTY() {
                println("Part 2: {}", x*4000000+y)
                found = true
                break
            }
        }
        if found {
            break
        }
    }
}
