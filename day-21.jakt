import helpers { read_lines, panic }

enum Equation {
    Constant(value: i64)
    Add(a: String, b: String)
    Minus(a: String, b: String)
    Multiply(a: String, b: String)
    Divide(a: String, b: String)

    UNKNOWN()

    function parse(anon s: String) throws -> Equation {
        let value = s.to_int()
        if value.has_value() {
            return Equation::Constant(value: value! as! i64)
        }
        let split = s.split(' ')
        return match split[1] {
            "+" => Equation::Add(a: split[0], b: split[2])
            "-" => Equation::Minus(a: split[0], b: split[2])
            "*" => Equation::Multiply(a: split[0], b: split[2])
            "/" => Equation::Divide(a: split[0], b: split[2])
            else => {
                if 1==1 {panic("unreachable: Equation::parse")}
                yield Equation::UNKNOWN()
            }
        }
    }

    function _solve2(d: [String:Equation], a: String, b: String) -> (i64?, i64?, String, String) {
        mut r_a: i64? = None
        mut r_b: i64? = None
        if d.contains(a) {
            r_a = d[a].solve(d)
        }
        if d.contains(b) {
            r_b = d[b].solve(d)
        }
        return (r_a, r_b, a, b)
    }

    function _solve(d: [String:Equation], a: String, b: String) -> (i64, i64)? {
        let (r_a, r_b, _a, _b) = _solve2(d, a, b)
        guard r_a.has_value() and r_b.has_value() else {
            return None
        }
        return (r_a!, r_b!)
    }

    function solve(this, anon d: [String:Equation]) -> i64? {
        if this is Constant(value) {
            return Some(value)
        }
        let t = match this {
            Add(a, b) => _solve(d, a, b)
            Minus(a, b) => _solve(d, a, b)
            Multiply(a, b) => _solve(d, a, b)
            Divide(a, b) => _solve(d, a, b)
            else => {
                if 1==1 {panic("unreachable: Equation::solve")}
                yield None
            }
        }
        guard t.has_value() else { return None }
        return match this {
            Add() => t!.0 + t!.1
            Minus() => t!.0 - t!.1
            Multiply() => t!.0 * t!.1
            Divide() => {
                if t!.1 == 0 { return None }
                yield t!.0 / t!.1
            }
            else => {
                if 1==1 {panic("unreachable: Equation::solve")}
                yield None
            }
        }
    }

    function solve2(this, anon d: [String:Equation]) -> i64? {
        let (r_a, r_b, a, b) = match this {
            Add(a, b) => _solve2(d, a, b)
            Minus(a, b) => _solve2(d, a, b)
            Multiply(a, b) => _solve2(d, a, b)
            Divide(a, b) => _solve2(d, a, b)
            else => {
                if 1==1 {panic("unreachable: Equation::solve")}
                yield (None, None, "", "")
            }
        }
                println("t = {}", (r_a, r_b, a, b))
        if not r_a.has_value() {
            if a == "humn" {
                return r_b
            }
            // FIXME do actual solving of equation
            return d[a].solve2(d)
        } else if not r_b.has_value() {
            if b == "humn" {
                return r_a
            }
            // FIXME do actual solving of equation
            return d[b].solve2(d)
        }
        return None
    }
}


function main(args: [String]) {
    mut monkeys: [String:Equation] = [:]
    for line in read_lines(filename: "input") {
        let split = line.split(':')
        monkeys.set(split[0], Equation::parse(split[1]))
    }
    let root = monkeys["root"]
    println("Part 1: {}", root.solve(monkeys))
    monkeys.remove("humn")
    println("Part 2: {}", root.solve2(monkeys))
}


