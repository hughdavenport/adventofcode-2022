import helpers { read_lines, panic, is_digit }

enum Cell {
    OUT()
    FLOOR()
    WALL()
    UNKNOWN()

    function from_byte(anon b: u8) throws -> Cell => match b {
        b' ' => Cell::OUT()
        b'.' => Cell::FLOOR()
        b'#' => Cell::WALL()
        else => {
            if 1==1 { panic(format("unreachable Cell::from_byte(), unknown byte {:c}", b)) }
            yield Cell::UNKNOWN()
        }
    }

    function to_byte(this) -> u8 => match this {
        OUT() => b' '
        FLOOR() => b'.'
        WALL() => b'#'
        UNKNOWN() => {
            if 1==1 { panic("unreachable Cell::to_byte(), unknown type") }
            yield 0u8
        }
    }
}

enum Direction {
    RIGHT
    DOWN
    LEFT
    UP

    function to_usize(this) -> usize => match this {
        RIGHT() => 0uz
        DOWN() => 1uz
        LEFT() => 2uz
        UP() => 3uz
    }

    function from_usize(anon u: usize) throws -> Direction => match u {
        0uz => Direction::RIGHT()
        1uz => Direction::DOWN()
        2uz => Direction::LEFT()
        3uz => Direction::UP()
        else => {
            if 1==1 { panic(format("unreachable Direction::from_usize(), invalid input {}", u)) }
            yield Direction::RIGHT()
        }
    }

    function to_byte(this) -> u8 => match this {
        RIGHT() => b'>'
        DOWN() => b'v'
        LEFT() => b'<'
        UP() => b'^'
    }
}

struct Position {
    x: usize
    y: usize
    direction: Direction

    function password(this) -> usize => 1000*(.y+1) + 4*(.x+1) + .direction.to_usize()
}

class Cube : Grid {
    faces: [CubeFace]

    // FIXME this is public due to bug #1324
    public function _wrap(this, position: Position) -> Position {
        panic("unimplemented: Cube::_wrap()")
    }
}

class CubeFace {
    position: Position
    north: CubeFace? = None
    south: CubeFace? = None
    west: CubeFace? = None
    east: CubeFace? = None

    public function fold(mut this, grid: Grid) throws -> Cube {
        mut size = 50uz
        if grid.grid.size() == 12 {
            size = 4uz
        }

        mut c = CubeFace(position: .position)
        c.position.x += size
        if c.position.x >= grid.grid[c.position.y].size() {
            c.position.x = .position.x
            c.position.y += size
            .south = c
        } else if grid.grid[c.position.y][c.position.x] is OUT() {
            c.position.x = .position.x
            c.position.y += size
            .south = c
        } else {
            .east = c
        }
        // TODO do more? recurse?

        if 1==1 { panic("todo cubeface fold recurse") }

        mut faces: [CubeFace] = []
        faces.push(this)
        faces.push(.north!)
        faces.push(.south!)
        faces.push(.west!)
        faces.push(.east!)
        faces.push(.north!.north!)
        return Cube(grid: grid.grid, faces)
    }
}

class Grid {
    public grid: [[Cell]]

    public function fold(this) throws -> Cube {
        mut size = 50uz
        if .grid.size() == 12 {
            size = 4uz
        }

        mut position = .first()
        position.x -= position.x % size
        position.direction = Direction::UP()
        mut top = CubeFace(position)
        return top.fold(grid: this)
    }

    public function parse(anon lines: [String]) throws -> Grid {
        mut grid: [[Cell]] = []
        for line in lines {
            if line.length() == 0 { break }
            mut row: [Cell] = []
            for i in 0..line.length() {
                row.push(Cell::from_byte(line.byte_at(i)))
            }
            grid.push(row)
        }
        return Grid(grid)
    }

    public function to_string(this, position: Position? = None) throws -> String {
        mut builder = StringBuilder::create()
        for y in 0..this.grid.size() {
            for x in 0..this.grid[y].size() {
                if position.has_value() and position!.x == x and position!.y == y {
                    builder.append_string("\e[1;31m")
                    builder.append(position!.direction.to_byte())
                    builder.append_string("\e[m")
                } else {
                    builder.append(.grid[y][x].to_byte())
                }
            }
            builder.append(b'\n')
        }
        return builder.to_string()
    }

    public function first(this) -> Position {
        let y = 0uz
        guard not .grid.is_empty() and not .grid[y].is_empty() else {
            panic("unreachable Grid::first() empty")
        }
        for x in 0..this.grid[y].size() {
            if .grid[y][x] is FLOOR() {
                return Position(x, y, direction: Direction::RIGHT)
            }
        }
        panic("unreachable Grid::first() none")
    }

    // FIXME this has an optional cube param due to bug #1324
    function _wrap(this, position: Position, cube: Cube? = None) -> Position {
        if cube.has_value() {
            return cube!._wrap(position)
        }
        mut x = position.x
        mut y = position.y
        let direction = position.direction
        match direction {
            RIGHT() => {
                while x > 0 {
                    x --
                    if y + 1 > .grid.size() {
                        x ++
                        break
                    }
                    if .grid[y][x] is OUT() {
                        x ++
                        break
                    }
                }
            }
            LEFT() => {
                while x + 2 < .grid[y].size() {
                    x ++
                    if y + 1 > .grid.size() {
                        x --
                        break
                    }
                    if .grid[y][x] is OUT() {
                        x --
                        break
                    }
                }
            }
            UP() => {
                while y + 2 < .grid.size() {
                    y ++
                    if x + 1 > .grid[y].size() {
                        y --
                        break
                    }
                    if .grid[y][x] is OUT() {
                        y --
                        break
                    }
                }
            }
            DOWN() => {
                while y > 0 {
                    y --
                    if x + 1 > .grid[y].size() {
                        y ++
                        break
                    }
                    if .grid[y][x] is OUT() {
                        y ++
                        break
                    }
                }
            }
        }
        return Position(x, y, direction)
    }

    // FIXME this has an optional cube param due to bug #1324
    public function next(this, position: Position, cube: Cube? = None) -> Position? {
        mut x = position.x + 1
        mut y = position.y + 1
        mut direction = position.direction
        match position.direction {
            RIGHT() => x++
            LEFT() => x--
            UP() => y--
            DOWN() => y++
        }
        if x == 0 or y == 0 or y-1 >= .grid.size() or x-1 >= .grid[y-1].size() {
            // FIXME this has an optional cube param due to bug #1324
            let wrapped = ._wrap(position, cube)
            x = wrapped.x
            y = wrapped.y
            direction = wrapped.direction
        } else {
            x--
            y--
        }
        if .grid[y][x] is OUT() {
            // FIXME this has an optional cube param due to bug #1324
            let wrapped = ._wrap(position, cube)
            x = wrapped.x
            y = wrapped.y
            direction = wrapped.direction
        }
        if .grid[y][x] is WALL() {
            return None
        }
        return Position(x, y, direction)
    }
}

enum Instruction {
    Move(steps: i64)
    Rotate(b: u8)

    // FIXME this has an optional cube param due to bug #1324
    function execute(this, grid: Grid, cube: Cube? = None, mut position: Position, debug: bool = false) throws -> Position => match this {
        Move(steps) => {
            for i in 0..steps {
                // FIXME this has an optional cube param due to bug #1324
                let ret = grid.next(position, cube)
                if not ret.has_value() {
                    break
                }
                position = ret!
                if debug {
                    println("{}", grid.to_string(position))
                }
            }
            if debug {
                println("{}", grid.to_string(position))
            }
            yield position
        }
        Rotate(b) => {
            position.direction = match b {
                b'R' => Direction::from_usize((position.direction.to_usize() + 1) % 4)
                b'L' => Direction::from_usize((position.direction.to_usize() + 3) % 4)
                else => {
                    if 1==1 { panic(format("unreachable Direction::rotate(), invalid byte {:c}", b)) }
                    yield Direction::RIGHT()
                }
            }
            if debug {
                println("{}", grid.to_string(position))
            }
            yield position
        }
    }
}

class InstructionIterator implements(Iterable<Instruction>) {
    s: String
    idx: usize = 0uz

    public function construct(anon s: String) throws -> InstructionIterator {
        return InstructionIterator(s)
    }

    public function next(mut this) -> Instruction? {
        guard .idx < .s.length() else { return None }
        let b = .s.byte_at(.idx)
        .idx ++
        return match b {
            b'R' | b'L' => Instruction::Rotate(b)
            else => {
                mut steps = (b - b'0') as! i64
                while .idx < .s.length() and is_digit(.s.byte_at(.idx)) {
                    steps *= 10
                    steps += (.s.byte_at(.idx) - b'0') as! i64
                    .idx ++
                }
                yield Instruction::Move(steps)
            }
        }
    }
}

function main(args: [String]) {
    let lines = read_lines(filename: "input")
    let grid = Grid::parse(lines)
    let directions = lines.last()!
    mut position = grid.first()
    for i in InstructionIterator::construct(lines.last()!) {
        position = i.execute(grid, position)
    }
    println("Part 1: {}", position.password())
    let cube = grid.fold()
    position = cube.first()
    for i in InstructionIterator::construct(lines.last()!) {
        // FIXME this has an optional cube param due to bug #1324
        position = i.execute(grid: cube, cube, position, debug: true)
    }
}
