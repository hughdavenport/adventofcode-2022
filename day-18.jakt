import helpers { read_lines, max }

struct Cube {
    x: usize
    y: usize
    z: usize

    function construct(anon s: String) throws -> Cube {
        let split = s.split(',')
        let x = split[0].to_int()! as! usize
        let y = split[1].to_int()! as! usize
        let z = split[2].to_int()! as! usize
        return Cube(x, y, z)
    }
}

enum Cell {
    LAVA
    WATER
    AIR
}

function makeGrid(cubes: [Cube], size: usize) throws -> [[[Cell]]] {
    mut grid: [[[Cell]]] = []
    for z in 0..size {
        mut ys: [[Cell]] = []
        for y in 0..size {
            ys.push([Cell::AIR(); size])
        }
        grid.push(ys)
    }
    for c in cubes {
        grid[c.z][c.y][c.x] = Cell::LAVA()
    }
    mut reachable: [Cube] = []
    for a in 0..size {
        for b in 0..size {
            if isAir(grid, x: 0, y: a, z: b) {
                grid[b][a][0] = Cell::WATER()
                reachable.push(Cube(x: 0, y: a, z: b))
            }
            if isAir(grid, x: a, y: 0, z: b) {
                grid[b][0][a] = Cell::WATER()
                reachable.push(Cube(x: a, y: 0, z: b))
            }
            if isAir(grid, x: b, y: a, z: 0) {
                grid[0][a][b] = Cell::WATER()
                reachable.push(Cube(x: b, y: a, z: 0))
            }
        }
    }
    while not reachable.is_empty() {
        let c = reachable.pop()!
        if c.z >= 1 and isAir(grid, x: c.x, y: c.y, z: c.z-1) {
            grid[c.z-1][c.y][c.x] = Cell::WATER()
            reachable.push(Cube(x: c.x, y: c.y, z: c.z-1))
        }
        if c.y >= 1 and isAir(grid, x: c.x, y: c.y-1, z: c.z) {
            grid[c.z][c.y-1][c.x] = Cell::WATER()
            reachable.push(Cube(x: c.x, y: c.y-1, z: c.z))
        }
        if c.x >= 1 and isAir(grid, x: c.x-1, y: c.y, z: c.z) {
            grid[c.z][c.y][c.x-1] = Cell::WATER()
            reachable.push(Cube(x: c.x-1, y: c.y, z: c.z))
        }
        if c.z+1 < size and isAir(grid, x: c.x, y: c.y, z: c.z+1) {
            grid[c.z+1][c.y][c.x] = Cell::WATER()
            reachable.push(Cube(x: c.x, y: c.y, z: c.z+1))
        }
        if c.y+1 < size and isAir(grid, x: c.x, y: c.y+1, z: c.z) {
            grid[c.z][c.y+1][c.x] = Cell::WATER()
            reachable.push(Cube(x: c.x, y: c.y+1, z: c.z))
        }
        if c.x+1 < size and isAir(grid, x: c.x+1, y: c.y, z: c.z) {
            grid[c.z][c.y][c.x+1] = Cell::WATER()
            reachable.push(Cube(x: c.x+1, y: c.y, z: c.z))
        }
    }
    return grid
}

function isLava(grid: [[[Cell]]], x: usize, y: usize, z: usize) -> bool {
    guard z < grid.size() and y < grid[z].size() and x < grid[z][y].size() else {
        return false
    }
    return grid[z][y][x] is LAVA()
}

function isAir(grid: [[[Cell]]], x: usize, y: usize, z: usize) -> bool {
    guard z < grid.size() and y < grid[z].size() and x < grid[z][y].size() else {
        return false
    }
    return grid[z][y][x] is AIR()
}

function isWater(grid: [[[Cell]]], x: usize, y: usize, z: usize) -> bool {
    guard z < grid.size() and y < grid[z].size() and x < grid[z][y].size() else {
        return true
    }
    return grid[z][y][x] is WATER()
}

function part1(grid: [[[Cell]]]) -> usize {
    mut ret = 0uz
    for z in 0..grid.size() {
        for y in 0..grid[z].size() {
            for x in 0..grid[z][y].size() {
                if grid[z][y][x] is LAVA() {
                    if not isLava(grid, x, y, z: z+1) { ret ++ }
                    if z >= 1 and not isLava(grid, x, y, z: z-1) { ret ++ }
                    if not isLava(grid, x, y: y+1, z) { ret ++ }
                    if y >= 1 and not isLava(grid, x, y: y-1, z) { ret ++ }
                    if not isLava(grid, x: x+1, y, z) { ret ++ }
                    if x >= 1 and not isLava(grid, x: x-1, y, z) { ret ++ }
                    if x == 0 { ret ++ }
                    if y == 0 { ret ++ }
                    if z == 0 { ret ++ }
                }
            }
        }
    }
    return ret
}

function part2(grid: [[[Cell]]]) -> usize {
    mut ret = 0uz
    for z in 0..grid.size() {
        for y in 0..grid[z].size() {
            for x in 0..grid[z][y].size() {
                if grid[z][y][x] is LAVA() {
                    if isWater(grid, x, y, z: z+1) { ret ++ }
                    if z >= 1 and isWater(grid, x, y, z: z-1) { ret ++ }
                    if isWater(grid, x, y: y+1, z) { ret ++ }
                    if y >= 1 and isWater(grid, x, y: y-1, z) { ret ++ }
                    if isWater(grid, x: x+1, y, z) { ret ++ }
                    if x >= 1 and isWater(grid, x: x-1, y, z) { ret ++ }
                    if x == 0 { ret ++ }
                    if y == 0 { ret ++ }
                    if z == 0 { ret ++ }
                }
            }
        }
    }
    return ret
}

function main(args: [String]) {
    mut cubes: [Cube] = []
    mut max = 0uz
    for line in read_lines(filename: "input") {
        let cube = Cube::construct(line)
        cubes.push(cube)
        max = max(max, cube.x)
        max = max(max, cube.y)
        max = max(max, cube.z)
    }
    let grid = makeGrid(cubes, size: max + 1)
    println("Part 1: {}", part1(grid))
    println("Part 2: {}", part2(grid))
}
