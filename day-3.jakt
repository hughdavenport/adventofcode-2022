function read_lines(filename: String) throws -> [String] {
    mut ret: [String] = []
    mut file = File::open_for_reading(filename)
    mut builder = StringBuilder::create()
    for b in file.read_all() {
        if b == '\n' as! u8 {
            ret.push(builder.to_string())
            builder = StringBuilder::create()
        } else {
            builder.append(b)
        }
    }
    if not builder.is_empty() {
        ret.push(builder.to_string())
    }
    return ret
}


function main(args: [String]) {
//    if args.size() <= 1 {
//        eprintln("usage: {} <input file>", args[0])
//        return 1
//    }

    mut sum = 0;
    for line in read_lines(filename: "input") {
        let ln = line.length()
        let first = line.substring(start: 0, length: ln/2)
        let second = line.substring(start: ln/2, length: ln/2)
        for i in 0..first.length() {
            if second.contains(first.substring(start: i, length: 1)) {
                mut b = first.byte_at(i)
                if b >= 'a' as! u8 {
                    b -= 'a' as! u8
                    b += 1
                } else {
                    b -= 'A' as! u8
                    b+= 27
                }
                sum += b as! i64
                break
            }
        }
    }
    println("Part 1: {}", sum)
}
