import helpers { read_lines, abs }

struct Grid {
    data: [[u8]]

    function parse(lines: [String]) throws -> (Grid, Point, Point, [Point]) {
        mut data: [[u8]] = []
        mut start: Point? = None
        mut goal: Point? = None
        mut lowest_points: [Point] = []
        for line in lines {
            mut row: [u8] = []
            for i in 0..line.length() {
                let b = line.byte_at(i)
                match b {
                    b'S' => {
                        start = Point(x: i as! i64, y: data.size() as! i64)
                        row.push(0u8)
                        lowest_points.push(start!)
                    }
                    b'E' => {
                        goal = Point(x: i as! i64, y: data.size() as! i64)
                        row.push(25u8)
                    }
                    else => {
                        if b == b'a' {
                            lowest_points.push(Point(x: i as! i64, y: data.size() as! i64))
                        }
                        row.push(b - b'a')
                    }
                }
            }
            data.push(row)
        }
        return (Grid(data), start!, goal!, lowest_points)
    }

    function at(this, p: Point) -> u8 {
        return this.data[p.y][p.x]
    }

    function height(this) -> i64 {
        return this.data.size() as! i64
    }

    function width(this) -> i64 {
        return this.data[0].size() as! i64
    }
}

struct Point {
    x: i64
    y: i64
    goal_x: i64 = 0
    goal_y: i64 = 0
    f: i64 = 0

    function neighbours(this, grid: Grid) throws -> [Point] {
        mut ret: [Point] = []
        let current = grid.at(p: this)
        mut p = Point(x: this.x-1, y: this.y, goal_x: this.goal_x, goal_y: this.goal_y, f: this.f)
        if p.x >= 0 and grid.at(p) <= current + 1 {
            ret.push(p)
        }
        p = Point(x: this.x, y: this.y-1, goal_x: this.goal_x, goal_y: this.goal_y, f: this.f)
        if p.y >= 0 and grid.at(p) <= current + 1 {
            ret.push(p)
        }
        p = Point(x: this.x+1, y: this.y, goal_x: this.goal_x, goal_y: this.goal_y, f: this.f)
        if p.x < grid.width() and grid.at(p) <= current + 1 {
            ret.push(p)
        }
        p = Point(x: this.x, y: this.y+1, goal_x: this.goal_x, goal_y: this.goal_y, f: this.f)
        if p.y < grid.height() and grid.at(p) <= current + 1 {
            ret.push(p)
        }
        return ret
    }

    function to_i64(this, grid: Grid) -> i64 {
        return this.y * grid.width() + this.x
    }

    function eq(this, anon p: Point) -> bool {
        return this.x == p.x and this.y == p.y
    }

    function h(this) -> i64 {
        return abs(.x - .goal_x) + abs(.y - .goal_y)
    }
}

function a_star(grid: Grid, mut start: Point, goal: Point) throws -> i64? {
    mut open = PriorityQueue()
    start.goal_x = goal.x
    start.goal_y = goal.y
    open.insert(priority: 0, value: start)
    // Still need weird i64's as can't use Point's in a Dictionary
    mut gs = Dictionary<i64, i64?>()
    gs[start.to_i64(grid)] = 0
    mut fs = Dictionary<i64, i64?>()
    fs[start.to_i64(grid)] = start.h()
    while not open.is_empty() {
        let current = open.peek()!
        let current_i = current.to_i64(grid)
        if current.eq(goal) {
            return Some(current.f)
        }
        let ignore = open.pop()
        for n in current.neighbours(grid) {
            let n_i = n.to_i64(grid)
            let g = gs[current_i]! + 1
            if not gs.contains(n_i) or g < gs[n_i]! {
                gs[n_i] = g
                fs[n_i] = g + n.h()
                n.f = fs[n_i]!
                open.insert(priority: n.f, value: n)
            }
        }
    }
    return None
}

function main(args: [String]) {
    let (grid, start, goal, lowest_points) = Grid::parse(lines: read_lines(filename: "input"))
    mut min = a_star(grid, start, goal)!
    println("Part 1: {}", min)
    for p in lowest_points {
        let d = a_star(grid, start: p, goal)
        if d.has_value() and d! < min {
            min = d!
        }
    }
    println("Part 2: {}", min)
}
struct ParentIterator implements(Iterable<usize>) {

    idx: usize

    function next(mut this) -> usize? {
        guard .idx != 0 else {
            return None
        }

        let ret = (.idx - 1) / 2
        .idx = ret
        return ret
    }
}
class PriorityQueue {

    public data: [(i64, Point)]? = None


    public function insert(mut this, priority: i64, value: Point) throws {
        ._initialize_if_needed()

        .data!.push((priority, value))
        ._sift_up(idx: .data!.size() - 1)
    }

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _sift_up(mut this, idx: usize) {
        guard .data.has_value() and idx < .data!.size() else { return }
        mut child_idx = idx
        for parent_idx in ParentIterator(idx) {
            let child = .data![child_idx].0
            let parent = .data![parent_idx].0
            if child >= parent {
                break
            }
            ._swap(child_idx, parent_idx)
            child_idx = parent_idx
        }
    }

    public function pop(mut this) -> Point? {
        guard .data.has_value() and .data!.size() > 0 else {
            return None
        }
        if .data!.size() == 1 {
            return .data!.pop()!.1
        }

        let ret = .data![0].1
        ._remove(idx: 0)
        return ret
    }

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _remove(mut this, idx: usize) {
        guard .data.has_value() and idx < .data!.size() else { return }
        guard idx < .data!.size() - 1 else {
            let ignore = .data!.pop()
            return
        }
        .data![idx] = .data!.pop()!
        mut parent_idx = idx
        while parent_idx < .data!.size() {
            mut (left_idx, right_idx) = (parent_idx * 2 + 1, parent_idx * 2 + 2)
            guard left_idx < .data!.size() else { break }
            let parent = .data![parent_idx].0
            let left = .data![left_idx].0
            if left >= parent {
                // left child is correct, check the right
                guard right_idx < .data!.size() and .data![right_idx].0 < parent else { break }
                // fall through to swap right
            } else if right_idx >= .data!.size() or .data![right_idx].0 >= left {
                // right is non-existent or bigger than left
                ._swap(left_idx, parent_idx)
                parent_idx = left_idx
                continue
            }
            ._swap(right_idx, parent_idx)
            parent_idx = right_idx
        }
    }


    public function peek(this) -> Point? {
        guard .data.has_value() and .data!.size() > 0 else {
            return None
        }
        return .data![0].1
    }

    public function size(this) -> usize {
        guard .data.has_value() else { return 0 }
        return .data!.size()
    }

    public function is_empty(this) -> bool => .size() == 0

    // Private functions

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _initialize_if_needed(mut this) throws {
        if .data.has_value() { return }
        let data: [(i64,Point)] = []
        .data = data
    }

    public // FIXME: This is needed to be public due to https://github.com/SerenityOS/jakt/issues/1301
    function _swap(mut this, anon a: usize, anon b: usize) {
        guard .data.has_value() and a < .data!.size() and b < .data!.size() else {
            return
        }
        let tmp = .data![a]
        .data![a] = .data![b]
        .data![b] = tmp
    }
}
